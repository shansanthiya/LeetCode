 bool isSymmetricUtil(TreeNode* root1, TreeNode* root2)
    {
        if(root1 == NULL && root2 == NULL)
            return true;
        
        if( root1 && root2 && root1->val == root2->val)
            return isSymmetricUtil(root1->left, root2->right) && 
                    isSymmetricUtil(root1->right, root2->left);
        return false;
    }
    bool isSymmetric(TreeNode* root) {
        return isSymmetricUtil(root, root);
        
    }
    
    //Alternate implementation
   /*
   bool isSameTree(struct TreeNode* p, struct TreeNode* q){
    
    if (p == NULL && q == NULL )
        return true;
    
    if (p == NULL || q == NULL )
        return false;
    return (p->val == q->val &&
                     isSameTree(p->left, q->right) &&
                     isSameTree(p->right, q->left));

}

bool isSymmetric(struct TreeNode* root){

    if(root == NULL)
        return true;
    
    if(isSameTree(root->left,root->right))
        return true;
    else
        return false;
}
*/
